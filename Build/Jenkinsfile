#!/usr/bin/env groovy
pipeline {
  agent any
  parameters {
        string(name: 'MAJOR_NUMBER', defaultValue: '0', description: 'Major number for this build')
		string(name: 'MINOR_NUMBER', defaultValue: '1', description: 'Minor number for this build')
		string(name: 'BUILD', defaultValue: '0', description: '')
    }
  stages {
	stage('Pre Build') {
      steps {
        sh 'bash fsharpi ./Dev/CheckCodeStyle.fsx'
      }
    }
    stage('Build') {
      steps {
        sh 'dotnet publish $SOLUTION_PATH -c $BUILD_CONFIG -o $PROJECT_OUTPUT_FOLDER'
      }
    }
    stage('Unit tests') {
      environment {
        RESULTS_OUTPUT_PATH = 'testresults'
        FULL_RESULTS_PATH ="$WORKSPACE/$RESULTS_OUTPUT_PATH"
      }
      steps {
        
        sh "mkdir $RESULTS_OUTPUT_PATH"
        sh 'bash ./Build/run_tests.sh $SOLUTION_PATH $BUILD_CONFIG $PROJECT_OUTPUT_FOLDER $FULL_RESULTS_PATH *.Tests*'
        xunit testTimeMargin: "3000", 
              thresholdMode: 1, 
              thresholds: [
                failed(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '0', unstableThreshold: '0'), 
                skipped(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '0', unstableThreshold: '0')
              ], 
              tools: [
                MSTest(deleteOutputFiles: true, 
                failIfNotNew: true, 
                pattern: "${RESULTS_OUTPUT_PATH}/*.trx", skipNoTestFiles: true, stopProcessingIfError: false)
              ]
      }
    }
    stage('Integration tests') {
      environment {
        RESULTS_OUTPUT_PATH = 'integrationtestresults'
        FULL_RESULTS_PATH ="$WORKSPACE/$RESULTS_OUTPUT_PATH"
      }
      steps {
        
        sh "mkdir $RESULTS_OUTPUT_PATH"
        sh 'bash ./Build/run_tests.sh $SOLUTION_PATH $BUILD_CONFIG $PROJECT_OUTPUT_FOLDER $FULL_RESULTS_PATH *.IntegrationTests*'
        xunit testTimeMargin: "3000", 
              thresholdMode: 1, 
              thresholds: [
                failed(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '0', unstableThreshold: '0'), 
                skipped(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '0', unstableThreshold: '0')
              ], 
              tools: [
                MSTest(deleteOutputFiles: true, 
                failIfNotNew: true, 
                pattern: "${RESULTS_OUTPUT_PATH}/*.trx", skipNoTestFiles: true, stopProcessingIfError: false)
              ]
      }
    }
    stage('Publish'){
        environment {
            PROJECTS ='Chainium.Blockchain.Public.Node;Chainium.Blockchain.Public.Wallet;'
        }
        steps {
            sh "mkdir $PUBLISH_DIR"
            sh 'bash ./Build/package.sh $SOLUTION_PATH $PROJECTS $PUBLISH_DIR $PROJECT_OUTPUT_FOLDER $SOLUTION_NAME'
        }
    }
  }
  
  
  environment {
    SOLUTION_PATH = 'Source'
    BUILD_CONFIG = 'Release'
    PROJECT_OUTPUT_FOLDER = 'Release'
    PUBLISH_DIR = 'publish'
	SOLUTION_NAME = 'ChainiumBlockchain'
  }
  
  post {
        success {
			archiveArtifacts artifacts: "$PUBLISH_DIR/*.tar.gz,$PUBLISH_DIR/*.zip", fingerprint: true
			sendSlackMessage("Completed","good")
        }
        failure {
           sendSlackMessage("Failed","danger")
        }
        unstable {
			sendSlackMessage("Unstable","warning")
        }
        changed {
            slackSend color: "good", message: "${env.JOB_NAME}  has changed status. More info at: (<${env.BUILD_URL}|Open>)"
        }

    }
}

@NonCPS
def getChangeString() {
	MAX_MSG_LEN = 100
	def changeString = ""

	echo "Gathering SCM changes"
	def changeLogSets = currentBuild.changeSets
	for (int i = 0; i < changeLogSets.size(); i++) {
		def entries = changeLogSets[i].items
		for (int j = 0; j < entries.length; j++) {
		def entry = entries[j]
		truncated_msg = entry.msg.take(MAX_MSG_LEN)
	changeString += " - ${truncated_msg} [${entry.author}]\n"
	}
	}

	if (!changeString) {
		changeString = " - No new changes"
	}
	return changeString
}
	
def sendSlackMessage(status,color){
	slackSend color: color, message: status+ ": ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nChanges:\n"+getChangeString()
}